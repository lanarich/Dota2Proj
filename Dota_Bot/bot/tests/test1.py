import unittest
from unittest.mock import patch, mock_open, MagicMock
from handlers.predict_items import load_model, dataframe_preprocessing, \
    predict_csv_file, columns_true_false_convert, columns_with_leaver_status
import pandas as pd
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from keyboards.inline import place_kb
from utils.database import DataBase


class TestLoadModel(unittest.TestCase):

    @patch('builtins.open', new_callable=mock_open,
           read_data=b'random_forest_model_data')
    @patch('joblib.load')
    def test_load_model(self, joblib_load_mock, open_mock):
        model_mock = 'mocked_model'
        joblib_load_mock.return_value = model_mock

        model = load_model()

        open_mock.assert_called_once_with('random_forest.h5', 'rb')
        joblib_load_mock.assert_called_once_with(open_mock())
        self.assertEqual(model, model_mock)


class TestPlaceKb(unittest.TestCase):
    def test_place_kb(self):
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        keyboard_markup = place_kb()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º
        # InlineKeyboardMarkup
        self.assertIsInstance(keyboard_markup, InlineKeyboardMarkup)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ  5 –∫–Ω–æ–ø–æ–∫
        self.assertEqual(len(keyboard_markup.inline_keyboard), 5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ
        # –≤—ã–∑–æ–≤–∞
        for i, button in enumerate(keyboard_markup.inline_keyboard[0]):
            self.assertIsInstance(button, InlineKeyboardButton)
            self.assertEqual(button.text, "üåü" * (i + 1))
            self.assertEqual(button.callback_data, f"set:{i +  1}")


class TestDataframePreprocessing(unittest.TestCase):

    def test_dataframe_preprocessing(self):
        # —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame
        test_data = 'for_prediction.csv'
        df = pd.read_csv(test_data)

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é dataframe_preprocessing
        processed_df = dataframe_preprocessing(df, predict_items_bool=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        self.assertEqual(processed_df['didRadiantWin'].dtype, int)
        for column in columns_true_false_convert:
            self.assertEqual(processed_df[column].dtype, int)
        for column in columns_with_leaver_status:
            self.assertEqual(processed_df[column].dtype, int)


class TestPredictCsvFile(unittest.TestCase):

    @patch('joblib.load')
    @patch('handlers.predict_items.dataframe_preprocessing')
    @patch('pandas.read_csv')
    def test_predict_csv_file(
            self, mock_read_csv, mock_dataframe_preprocessing, mock_load):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        file_name = 'test_data.csv'
        model_features = ['feature1', 'feature2']
        mock_model = MagicMock()
        mock_model.feature_names_in_ = model_features
        mock_load.return_value = mock_model

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é predict_csv_file
        predictions = predict_csv_file(file_name)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è pd.read_csv –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
        # –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        mock_read_csv.assert_called_once_with(file_name)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è dataframe_preprocessing –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        mock_dataframe_preprocessing.assert_called_once()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ predict_proba –±—ã–ª –≤—ã–∑–≤–∞–Ω —É –º–æ–¥–µ–ª–∏
        mock_model.predict_proba.assert_called_once()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º
        # –º–æ–¥–µ–ª–∏
        self.assertEqual(
            predictions, mock_model.predict_proba.return_value[:, 1])


class TestDataBase(unittest.TestCase):

    def setUp(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.db = DataBase(':memory:')

    def test_create_db(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ
        self.db.create_db()
        self.assertIn(('users',), self.db.cursor.execute(
            "SELECT name FROM sqlite_master WHERE type='table';").fetchall())

    def test_add_mark(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mark = 'A'
        telegram_id = '12345'
        self.db.add_mark(user_mark, telegram_id)
        result = self.db.cursor.execute(
            "SELECT * FROM users WHERE telegram_id = ?",
            (telegram_id,)).fetchone()
        self.assertEqual(result[1], user_mark)
        self.assertEqual(result[2], telegram_id)

    def test_select_marks(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä–∫—É –≤—Å–µ—Ö –º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        marks = self.db.select_marks()
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Ç –º–µ—Ç–æ–∫
        self.assertEqual(len(marks), 0)
        self.db.add_mark('A', '12345')
        marks = self.db.select_marks()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—Å—Ç—å –æ–¥–Ω–∞ –º–µ—Ç–∫–∞
        self.assertEqual(len(marks), 1)

    def test_select_user_id(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        telegram_id = '12345'
        self.db.add_mark('A', telegram_id)
        user = self.db.select_user_id(telegram_id)
        self.assertIsNotNone(user)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ telegram_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        self.assertEqual(user[2], telegram_id)

    def tearDown(self):
        del self.db  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö


if __name__ == '__main__':
    unittest.main()
